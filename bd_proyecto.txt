CREATE TABLE estados (
    est_id integer NOT NULL,
    est_nombre character varying
);

INSERT INTO estados (est_id, est_nombre) VALUES (1, 'Activo');
INSERT INTO estados (est_id, est_nombre) VALUES (2, 'Inactivo');
INSERT INTO estados (est_id, est_nombre) VALUES (3, 'Pendiente');
INSERT INTO estados (est_id, est_nombre) VALUES (4, 'En revision');
INSERT INTO estados (est_id, est_nombre) VALUES (5, 'En proceso');
INSERT INTO estados (est_id, est_nombre) VALUES (6, 'Rechazada');
INSERT INTO estados (est_id, est_nombre) VALUES (7, 'Completada');

CREATE TABLE tipo_estado(
    id_tipo_estado INTEGER NOT NULL,
    id_estado INTEGER,
    id_perteneciente INTEGER
);

INSERT INTO tipo_estado (id_tipo_estado, id_estado, id_perteneciente) VALUES (1, 1, 1);
INSERT INTO tipo_estado (id_tipo_estado, id_estado, id_perteneciente) VALUES (2, 2, 1);
INSERT INTO tipo_estado (id_tipo_estado, id_estado, id_perteneciente) VALUES (3, 3, 2);
INSERT INTO tipo_estado (id_tipo_estado, id_estado, id_perteneciente) VALUES (4, 4, 2);
INSERT INTO tipo_estado (id_tipo_estado, id_estado, id_perteneciente) VALUES (5, 5, 2);
INSERT INTO tipo_estado (id_tipo_estado, id_estado, id_perteneciente) VALUES (6, 6, 2);
INSERT INTO tipo_estado (id_tipo_estado, id_estado, id_perteneciente) VALUES (7, 7, 2);

CREATE TABLE rol (
    rol_id integer NOT NULL,
    rol_nombre character varying(30)
);

INSERT INTO rol (rol_id, rol_nombre) VALUES (1, 'Admin');
INSERT INTO rol (rol_id, rol_nombre) VALUES (2, 'Ciudadano');
INSERT INTO rol (rol_id, rol_nombre) VALUES (3, 'Funcionario');

CREATE TABLE tipo_documento (
    doc_id integer NOT NULL,
    nombre_tipo character varying,
    doc_abrev character varying(4)
);

INSERT INTO tipo_documento (doc_id, nombre_tipo, doc_abrev) VALUES (1, 'Cedula de ciudadania', 'CC');
INSERT INTO tipo_documento (doc_id, nombre_tipo, doc_abrev) VALUES (2, 'Cedula de extranjeria', 'CE');


CREATE TABLE sexo(
    sex_id SERIAL,
    sex_desc character varying(50)
);

INSERT INTO sexo (sex_id, sex_desc) VALUES (1, 'Masculino'), (2, 'Femenino');

CREATE TABLE usuarios (
    usu_id integer NOT NULL,
    usu_documento character varying(50) NOT NULL,
    usu_nombre1 character varying(50) NOT NULL,
    usu_nombre2 character varying(50),
    usu_apellido1 character varying(50) NOT NULL,
    usu_apellido2 character varying(50),
    usu_correo character varying(50) NOT NULL,
    usu_clave character varying(255) NOT NULL,
    usu_tel character varying(50) NOT NULL,
    usu_direccion character varying(500) NOT NULL,
    rol_id integer,
    est_id integer,
    doc_id integer,
    sex_id integer
);

INSERT INTO usuarios 
VALUES (1, '1106514243','Jose', 'Daniel', 'Ruiz', 'Montaño', 'jose@gmail.com', '3c165908b463ee85a6a32ab2f7c25a9f8a31431cd2cca0a128ea1db41fca8657', '3013623149', 'Calle 120 C 22 42', 1, 1, 1, 1);


CREATE TABLE pqrs(
    id_pqrs INTEGER NOT NULL,
    desc_pqrs character varying(50) NOT NULL, 
    tipo_pqrs INTEGER,
    usu_id INTEGER,
    fecha_hora timestamp NOT NULL
);

CREATE TABLE tipo_pqrs(
    id_tipo_pqrs INTEGER, 
    desc_tipo_pqrs character varying(50) NOT NULL
);

INSERT INTO tipo_pqrs VALUES (1, 'Peticion'),(2, 'Queja'), (3, 'Reclamos'), (4, 'Sugerencias');


REGISTRO DE ACCIDENTES TABLAS 

CREATE TABLE registro_accidente
(
    reg_acc_id serial primary key NOT NULL,
    reg_acc_fecha_hora timestamp NOT NULL,
    tipo_accidente_id integer NOT NULL,
    reg_acc_lesionados boolean NOT NULL,
    reg_acc_observaciones character varying NOT NULL,
    usu_id integer NOT NULL
);

CREATE TABLE punto_accidente
(
  id serial NOT NULL,
  id_accidente integer NOT NULL,
  geom geometry(Point,4326)
);


CREATE TABLE imagenes_accidente
(
    img_id integer NOT NULL,
    reg_acc_id integer NOT NULL,
    img_ruta character varying,
    CONSTRAINT imagenes_accidente_pkey PRIMARY KEY (img_id),
    CONSTRAINT imagenes_accidente_reg_acc_id_fkey FOREIGN KEY (reg_acc_id)
        REFERENCES public.registro_accidente (reg_acc_id)
);

CREATE TABLE vehiculo
(
    vehiculo_id integer NOT NULL,
    vehiculo_descripcion character varying(30) NOT NULL,
    CONSTRAINT vehiculo_pkey PRIMARY KEY (vehiculo_id)
);

INSERT INTO vehiculo (vehiculo_id, vehiculo_descripcion) VALUES
(1, 'Automóvil'),
(2, 'Bus'),
(3, 'Buseta'),
(4, 'Camión'),
(5, 'Camioneta'),
(6, 'Microbús'),
(7, 'Tractocamión'),
(8, 'Volqueta'),
(9, 'Motocicleta'),
(10, 'Bicicleta'),
(11, 'Motocarro'),
(12, 'Cuatrimoto');

CREATE TABLE reg_acc_vehi
(
    reg_acc_vehi_id integer NOT NULL,
    reg_acc_id integer NOT NULL,
    vehiculo_id integer NOT NULL,
    CONSTRAINT reg_acc_vehi_pkey PRIMARY KEY (reg_acc_vehi_id),
    CONSTRAINT reg_acc_vehi_reg_acc_id_fkey FOREIGN KEY (reg_acc_id)
        REFERENCES public.registro_accidente (reg_acc_id),
    CONSTRAINT reg_acc_vehi_vehiculo_id_fkey FOREIGN KEY (vehiculo_id)
        REFERENCES public.vehiculo (vehiculo_id)
);

CREATE TABLE tipo_choque
(
    tipo_choque_id integer NOT NULL,
    tipo_choque_desc character varying,
    CONSTRAINT tipo_choque_pkey PRIMARY KEY (tipo_choque_id)
);

INSERT INTO tipo_choque (tipo_choque_id, tipo_choque_desc) VALUES
(1, 'Colisión entre vehiculos'),
(2, 'Colisión con objeto fijo'),
(3, 'Atropello'),
(4, 'Volcamiento');

CREATE TABLE choque_detalle
(
    choq_detal_id integer NOT NULL,
    descripcion character varying(80),
    id_perteneciente integer,
    CONSTRAINT choque_detalle_pkey PRIMARY KEY (choq_detal_id)
);

INSERT INTO choque_detalle (choq_detal_id, descripcion, id_perteneciente) VALUES
(1, 'Automóvil con Bus', 1),
(2, 'Automóvil con Buseta', 1),
(3, 'Automóvil con Camión', 1),
(4, 'Automóvil con Camioneta', 1),
(5, 'Automóvil con Microbús', 1),
(6, 'Automóvil con Tractocamión', 1),
(7, 'Automóvil con Volqueta', 1),
(8, 'Automóvil con Motocicleta', 1),
(9, 'Automóvil con Bicicleta', 1),
(10, 'Automóvil con Motocarro', 1),
(11, 'Automóvil con Cuatrimoto', 1),
(12, 'Bus con Buseta', 1),
(13, 'Bus con Camión', 1),
(14, 'Bus con Camioneta', 1),
(15, 'Bus con Microbús', 1),
(16, 'Bus con Tractocamión', 1),
(17, 'Bus con Volqueta', 1),
(18, 'Bus con Motocicleta', 1),
(19, 'Bus con Bicicleta', 1),
(20, 'Bus con Motocarro', 1),
(21, 'Bus con Cuatrimoto', 1),
(22, 'Buseta con Camión', 1),
(23, 'Buseta con Camioneta', 1),
(24, 'Buseta con Microbús', 1),
(25, 'Buseta con Tractocamión', 1),
(26, 'Buseta con Volqueta', 1),
(27, 'Buseta con Motocicleta', 1),
(28, 'Buseta con Bicicleta', 1),
(29, 'Buseta con Motocarro', 1),
(30, 'Buseta con Cuatrimoto', 1),
(31, 'Camión con Camioneta', 1),
(32, 'Camión con Microbús', 1),
(33, 'Camión con Tractocamión', 1),
(34, 'Camión con Volqueta', 1),
(35, 'Camión con Motocicleta', 1),
(36, 'Camión con Bicicleta', 1),
(37, 'Camión con Motocarro', 1),
(38, 'Camión con Cuatrimoto', 1),
(39, 'Camioneta con Microbús', 1),
(40, 'Camioneta con Tractocamión', 1),
(41, 'Camioneta con Volqueta', 1),
(42, 'Camioneta con Motocicleta', 1),
(43, 'Camioneta con Bicicleta', 1),
(44, 'Camioneta con Motocarro', 1),
(45, 'Camioneta con Cuatrimoto', 1),
(46, 'Microbús con Tractocamión', 1),
(47, 'Microbús con Volqueta', 1),
(48, 'Microbús con Motocicleta', 1),
(49, 'Microbús con Bicicleta', 1),
(50, 'Microbús con Motocarro', 1),
(51, 'Microbús con Cuatrimoto', 1),
(52, 'Tractocamión con Volqueta', 1),
(53, 'Tractocamión con Motocicleta', 1),
(54, 'Tractocamión con Bicicleta', 1),
(55, 'Tractocamión con Motocarro', 1),
(56, 'Tractocamión con Cuatrimoto', 1),
(57, 'Volqueta con Motocicleta', 1),
(58, 'Volqueta con Bicicleta', 1),
(59, 'Volqueta con Motocarro', 1),
(60, 'Volqueta con Cuatrimoto', 1),
(61, 'Motocicleta con Bicicleta', 1),
(62, 'Motocicleta con Motocarro', 1),
(63, 'Motocicleta con Cuatrimoto', 1),
(64, 'Bicicleta con Motocarro', 1),
(65, 'Bicicleta con Cuatrimoto', 1),
(66, 'Motocarro con Cuatrimoto', 1),
(67, 'Poste', 2),
(68, 'Señal de Tránsito', 2),
(69, 'Árbol', 2),
(70, 'Muro', 2),
(71, 'Peatón', 3),
(72, 'Animal', 3),
(73, 'Exceso de velocidad', 4),
(74, 'Maniobra brusca', 4),
(75, 'Pérdida de control', 4),
(76, 'Sobrecarga', 4),
(77, 'Mal estado de la vía', 4),
(78, 'Curva cerrada', 4),
(79, 'Evasión de obstáculo', 4),
(80, 'Terreno resbaladizo', 4);


INSERT INTO choque_detalle (choq_detal_id, descripcion, id_perteneciente) VALUES
(11, 'Alta velocidad', 4),
(12, 'Pavimento mojado', 4),
(13, 'Error mecanico', 4);

CREATE TABLE registro_detalle_accidente
(
    reg_det_acc_id integer NOT NULL,
    reg_acc_id integer NOT NULL,
    choque_detalle_id integer NOT NULL,
    CONSTRAINT registro_detalle_accidente_pkey PRIMARY KEY (reg_det_acc_id),
    CONSTRAINT registro_detalle_accidente_choque_detalle_id_fkey FOREIGN KEY (choque_detalle_id)
        REFERENCES public.choque_detalle (choq_detal_id),
    CONSTRAINT registro_detalle_accidente_reg_acc_id_fkey FOREIGN KEY (reg_acc_id)
        REFERENCES public.registro_accidente (reg_acc_id)
);

REGISTRO DAÑOS EN VIA 

CREATE TABLE solicitud_via_dan
(
    sol_via_dan_id integer NOT NULL,
    tipo_dano_via_id integer,
    descripcion_via character varying,
    fecha_hora timestamp without time zone NOT NULL,
    via_id integer,
    est_sol_id integer,
    usu_id integer,
    CONSTRAINT solicitud_via_dan_pkey PRIMARY KEY (sol_via_dan_id)
);


CREATE TABLE punto_via
(
  id serial NOT NULL,
  id_via integer NOT NULL,
  geom geometry(Point,4326)
);

CREATE TABLE tipo_via(
    id_tipo_via SERIAL PRIMARY KEY NOT NULL,
    desc_via character varying
);


INSERT INTO tipo_via (desc_via) VALUES ('Calle');
INSERT INTO tipo_via (desc_via) VALUES ('Carrera');
INSERT INTO tipo_via (desc_via) VALUES ('Avenida');
INSERT INTO tipo_via (desc_via) VALUES ('Transversal');
INSERT INTO tipo_via (desc_via) VALUES ('Diagonal');
INSERT INTO tipo_via (desc_via) VALUES ('Autopista');
INSERT INTO tipo_via (desc_via) VALUES ('Vía de circunvalación');



CREATE TABLE imagenes_vias
(
    img_id integer NOT NULL,
    reg_via_id integer NOT NULL,
    img_ruta character varying NOT NULL,
    CONSTRAINT imagenes_vias_pkey PRIMARY KEY (img_id),
    CONSTRAINT imagenes_vias_reg_via_id_fkey FOREIGN KEY (reg_via_id)
        REFERENCES public.solicitud_via_dan (sol_via_dan_id) 
);




DAÑOS

CREATE TABLE danio
(
    danio_id integer NOT NULL,
    tipo_danio_id integer,
    solicitud_id integer,
    CONSTRAINT danio_pkey PRIMARY KEY (danio_id)
);

INSERT INTO danio (danio_id, tipo_danio_id, solicitud_id) VALUES
(1, 1, 1),
(2, 2, 1),
(3, 3, 1),
(4, 4, 2),
(5, 5, 2),
(6, 6, 2),
(7, 7, 3),
(8, 8, 3),
(9, 9, 3);

CREATE TABLE tipo_danio
(
    tipo_danio_id integer NOT NULL,
    tipo_danio_desc character varying(100),
    CONSTRAINT tipo_danio_pkey PRIMARY KEY (tipo_danio_id)
);

INSERT INTO tipo_danio (tipo_danio_id, tipo_danio_desc) VALUES
(1, 'Huecos en la vía'),
(2, 'Fisuras o grietas'),
(3, 'Hundimientos'),
(4, 'Señal caída'),
(5, 'Señal vandalizada'),
(6, 'Señal ilegible'),
(7, 'Desgaste en reductores'),
(8, 'Desnivel en reductores'),
(9, 'Ausencia de reductores');

CREATE TABLE categoria_seniales (
   categoria_seniales_id SERIAL NOT NULL PRIMARY KEY,
   categoria_seniales_desc character varying(40) NOT NULL
);


CREATE TABLE orientacion_seniales (
   orientacion_id SERIAL NOT NULL PRIMARY KEY,
   orientacion_desc character varying(50) NOT NULL
);


CREATE TABLE tipo_seniales (
   tipo_senial_id SERIAL NOT NULL PRIMARY KEY,
   tipo_sen_desc character varying(100) NOT NULL,
   orientacion_id integer(11) NOT NULL,
   cat_id integer(11) NOT NULL,
   FOREIGN KEY (orientacion_id) REFERENCES orientacion_seniales(orientacion_id),
   FOREIGN KEY (cat_id) REFERENCES categoria_seniales(categoria_seniales_id)
);


CREATE TABLE solicitud_seniales_new (
    sol_sen_new_id SERIAL PRIMARY KEY,
    tipo_sen_id INTEGER NOT NULL, 
    desc_sen VARCHAR(500) NOT NULL, 
    sol_sen_new_fecha TIMESTAMP,
    est_sol_id INTEGER NOT NULL, 
    usu_id INTEGER NOT NULL, 
    CONSTRAINT fk_tipo_sen FOREIGN KEY (tipo_sen_id) REFERENCES tipo_seniales (tipo_seniales_id),
    CONSTRAINT fk_est_sol FOREIGN KEY (est_sol_id) REFERENCES Estados (est_id),
    CONSTRAINT fk_usu FOREIGN KEY (usu_id) REFERENCES usuarios (usu_id)
);



INSERT INTO categoria_seniales VALUES (1,'Reglamentaria'),(2,'Informativa'),(3,'Preventiva');

INSERT INTO orientacion_seniales VALUES (1,'Vertical'),(2,'Horizontal'),(3,'Preventiva');

INSERT INTO tipo_seniales 
VALUES 
(1, 'Alto', 1, 1), 
(2, 'Límite de velocidad', 1, 1), 
(3, 'Prohibido', 1, 1), 
(4, 'Paradero', 2, 1), 
(5, 'Peligrosa', 3, 1), 
(6, 'Peatones', 3, 1); 

CREATE TABLE punto_senialNew
(
  id serial NOT NULL,
  id_senialNew integer NOT NULL,
  geom geometry(Point,4326)
);


CREATE TABLE solicitud_seniales_dan (
    sol_sen_dan_id SERIAL PRIMARY KEY,
    tipo_sen_id INTEGER NOT NULL, 
    desc_sen_dan VARCHAR(500) NOT NULL,
    danio_id INTEGER NOT NULL, 
    sol_sen_dan_fecha TIMESTAMP,
    img_sen_dan TEXT,
    est_sol_id INTEGER NOT NULL, 
    usu_id INTEGER NOT NULL, 
    CONSTRAINT fk_tipo_sen FOREIGN KEY (tipo_sen_id) REFERENCES tipo_seniales (tipo_senial_id),
    CONSTRAINT fk_est_sol FOREIGN KEY (est_id) REFERENCES Estados (est_id),
    CONSTRAINT fk_usu FOREIGN KEY (usu_id) REFERENCES usuarios (usu_id),
    CONSTRAINT fk_usu FOREIGN KEY (danio_id) REFERENCES danio(danio_id)
);

CREATE TABLE punto_senialDan
(
  id serial NOT NULL,
  id_senialDan integer NOT NULL,
  geom geometry(Point,4326)
);








CREATE TABLE categorias_reductores (
    categoria_red_id SERIAL PRIMARY KEY,
    nombre_red_categoria VARCHAR(50) NOT NULL,
    descripcion_cate_red TEXT
);

    INSERT INTO categorias_reductores (nombre_red_categoria, descripcion_cate_red)
VALUES 
    ('Reductores estructurales', 'Reductores diseñados para modificar la estructura de la vía y obligar a los vehículos a reducir su velocidad mediante cambios en el pavimento, desniveles o rotondas.'),
    ('Reductores modulares', 'Reductores de velocidad que incluyen sistemas flexibles y adaptables, como sistemas hidráulicos o electromagnéticos, que se ajustan a diferentes necesidades de la vía.'),
    ('Reductores de señalización', 'Reductores diseñados principalmente para alertar a los conductores sobre la necesidad de reducir su velocidad mediante señales luminosas, bandas rugosas, o sistemas de aviso sonoro.');


CREATE TABLE tipos_reductores (
    tipo_red_id SERIAL PRIMARY KEY,
    categoria_red_id INTEGER NOT NULL,
    nombre_tipo_red VARCHAR(100) NOT NULL,
    descripcion_tipo_red TEXT,
    FOREIGN KEY (categoria_red_id) REFERENCES categorias_reductores(categoria_red_id) 
);


INSERT INTO tipos_reductores (categoria_red_id, nombre_tipo_red, descripcion_tipo_red)
VALUES 
    (1, 'Reductor de velocidad por pavimento (baches controlados)', 'Reductores que utilizan pavimentos irregulares o elevados, forzando a los vehículos a reducir la velocidad para evitar daños mecánicos.'),
    (1, 'Rampa de velocidad (speed bumps)', 'Elevaciones en la calzada que causan un cambio brusco en la altura del pavimento, lo que obliga a los vehículos a reducir la velocidad.'),
    (1, 'Reductor de velocidad en rotondas', 'Rotondas diseñadas para reducir la velocidad de los vehículos obligándolos a tomar una curva cerrada, reduciendo la velocidad en intersecciones y zonas de alto tráfico.'),

    (2, 'Reductor de velocidad tipo "tobogán" (desnivel)', 'Sistemas modulares que crean desniveles o rampas para reducir gradualmente la velocidad de los vehículos.'),
    (2, 'Reductor modulado con sistemas hidráulicos o electromagnéticos', 'Sistemas adaptables que modifican la calzada de manera controlada para forzar la reducción de velocidad en zonas específicas.'),

    (3, 'Resaltos o lomadas', 'Dispositivos horizontales instalados transversalmente en la vía que obligan a los vehículos a reducir la velocidad al pasar sobre ellos.'),
    (3, 'Bandas rugosas (bandas sonoras)', 'Franja de material rugoso que genera un sonido cuando los vehículos pasan por encima, alertando a los conductores de la necesidad de reducir la velocidad.'),
    (3, 'Reductor de velocidad con señales luminosas (luminiscentes)', 'Reductores equipados con señales luminosas que alertan a los conductores de la necesidad de reducir la velocidad en zonas específicas.'),
    (3, 'Reductor de velocidad con sensores de velocidad', 'Reductores que activan luces o señales de alerta cuando los sensores detectan que los vehículos están excediendo la velocidad límite.'),
    (3, 'Reductor de velocidad con paneles dinámicos', 'Reductores que incluyen paneles electrónicos que muestran la velocidad del vehículo o el límite de velocidad, forzando a los conductores a reducir la velocidad.'),
    (3, 'Reductor de velocidad en zonas escolares', 'Dispositivos instalados cerca de escuelas que obligan a los conductores a reducir su velocidad para garantizar la seguridad de los peatones.'),
    (3, 'Reductor de velocidad en pasos de peatones', 'Áreas elevadas para pasos de peatones que obligan a los vehículos a reducir la velocidad para garantizar la seguridad de los peatones.'),
    (3, 'Rumble strips (bandas sonoras largas)', 'Bandas largas de pavimento que generan ruido y vibración, alertando a los conductores de la necesidad de reducir la velocidad, comúnmente utilizadas en carreteras de alta velocidad.');




CREATE TABLE solicitud_reductores_dan (
    sol_red_dan_id SERIAL PRIMARY KEY, 
    tipo_red_id INTEGER NOT NULL,   
    cate_red_dan INTEGER NOT NULL,   
    danio_id INTEGER NOT NULL,         
    desc_red TEXT,
    sol_red_dan_fecha TIMESTAMP,
    img_red_dan TEXT,                     
    est_sol_id INTEGER NOT NULL,       
    usu_id INTEGER NOT NULL
);

CREATE TABLE punto_reductorDan
(
  id_red_dan serial NOT NULL,
  id_reductorDan integer NOT NULL,
  geom geometry(Point,4326)
);




CREATE TABLE solicitud_reductores_new (
    sol_red_new_id SERIAL PRIMARY KEY, 
    tipo_red_id INTEGER NOT NULL,   
    cate_red_dan INTEGER NOT NULL,   
    desc_red_new TEXT,
    sol_red_new_fecha TIMESTAMP,                    
    est_sol_id INTEGER NOT NULL,       
    usu_id INTEGER NOT NULL
);

CREATE TABLE punto_reductorNew
(
  id_red_new serial NOT NULL,
  id_reductorNew integer NOT NULL,
  geom geometry(Point,4326)
);


CREATE TABLE tokens_contra
(
  id_token serial NOT NULL,
  token character varying(6) NOT NULL,
  usu_id integer NOT NULL,
  expiracion timestamp without time zone NOT NULL,
  CONSTRAINT tokens_contra_pkey PRIMARY KEY (id_token)
);



DISPARADORES

CREATE TABLE auditoria_usuarios (
    id SERIAL PRIMARY KEY,
    usuario_id INTEGER NOT NULL,
    fecha TIMESTAMP DEFAULT NOW()
);

CREATE OR REPLACE FUNCTION registrar_usuario()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO auditoria_usuarios(usuario_id, fecha)
    VALUES (NEW.usu_id, NOW()); 
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_registrar_usuario
AFTER INSERT ON usuarios
FOR EACH ROW
EXECUTE PROCEDURE registrar_usuario();



PROCEDIMIENTOS 

CREATE OR REPLACE FUNCTION contar_usuarios(OUT total INTEGER)
AS $$
BEGIN
    SELECT COUNT(*) INTO total FROM usuarios;
END;
$$ LANGUAGE plpgsql;





